% Computation of a magnetic flux density vector B generated by a Helmholtz
% cage consisting of three pairs of rectangular coils (of perpendicular
% axes) made of an infinitely thin wire.
% We use a righ-handed Cartesian coordinate system/frame.

%%
% Derivation of a simplified mathematical model of the cage using the
% Symbolic Math toolbox of the MATLAB application.
% Integration of an integrand function according to the Biot-Savart law.
tic
% Symbolic variables.
% Cartesian coordinates:
syms x y z real 
% The magnetic flux density vector is to be computed at the point
% r = [x;y;z] (at the location pointed by the position vector r):
r = [x;y;z]
% Cartesian coordinates of both ends of a side of a rectangular Helmholtz
% coil (a single coil of a pair):
syms xa ya za real
syms xb yb zb real
% Corresponding position vectors (ends of a side of a rectangular coil):
ra = [xa;ya;za]
rb = [xb;yb;zb]
% A parameter for line vector integral computation by substitution:
syms p real
assumeAlso(0 <= p)
assumeAlso(p <= 1)
% Position vector of a point moving along a coil side (along a path of
% integration):
rp = (1-p)*ra + p*rb
% rp = ra + p*(rb - ra)
% d rp = (rb - ra)* d p
% Displacement vector, relative position vector:
rr = r - rp
% Integrand function:
f = cross((rb - ra),rr)/(dot(rr,rr)^(3/2))
% f : R^3 -> R^3
% Indefinite integral:
F = int(f,p)
% Definite integral (integration limits substitution):
F = subs(F,p,1) - subs(F,p,0)
% F = int(f,p,0,1)
% Simplification:
F = simplify(F)
% Finding symbolic variables in the integral formula.
symvar(F)
toc

%%
% Side (edge) size (length) of a square-shaped coil; size or width of a coil (a - x, b - y, c - z).
syms da db dc positive
% Distances between coils belonging to a single pair
syms wa wb wc positive

%%
% Computing a sum of eight integrals corresponding to all sides of two
% coils (four sides each) of a single coil pair.
% The a coil is wound around the 0x axis; b - around y; c - around z.
tic
Fa = simplify( ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-wa/2,-da/2,-da/2, -wa/2,+da/2,-da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-wa/2,+da/2,-da/2, -wa/2,+da/2,+da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-wa/2,+da/2,+da/2, -wa/2,-da/2,+da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-wa/2,-da/2,+da/2, -wa/2,-da/2,-da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+wa/2,-da/2,-da/2, +wa/2,+da/2,-da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+wa/2,+da/2,-da/2, +wa/2,+da/2,+da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+wa/2,+da/2,+da/2, +wa/2,-da/2,+da/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+wa/2,-da/2,+da/2, +wa/2,-da/2,-da/2})))
symvar(Fa)
% Three Cartesian components of a resulting vector function.
Fax = Fa(1);
Fay = Fa(2);
Faz = Fa(3);
toc

% Computation for the coil pair wound around the 0y axis.
Fb = simplify( ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+db/2,-wb/2,-db/2, -db/2,-wb/2,-db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-db/2,-wb/2,-db/2, -db/2,-wb/2,+db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-db/2,-wb/2,+db/2, +db/2,-wb/2,+db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+db/2,-wb/2,+db/2, +db/2,-wb/2,-db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+db/2,+wb/2,-db/2, -db/2,+wb/2,-db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-db/2,+wb/2,-db/2, -db/2,+wb/2,+db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-db/2,+wb/2,+db/2, +db/2,+wb/2,+db/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+db/2,+wb/2,+db/2, +db/2,+wb/2,-db/2})))
symvar(Fb)
Fbx = Fb(1);
Fby = Fb(2);
Fbz = Fb(3);
toc

% Computation for the coil pair wound around the 0z axis.
Fc = simplify(...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+dc/2,+dc/2,-wc/2, -dc/2,+dc/2,-wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-dc/2,+dc/2,-wc/2, -dc/2,-dc/2,-wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-dc/2,-dc/2,-wc/2, +dc/2,-dc/2,-wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+dc/2,-dc/2,-wc/2, +dc/2,+dc/2,-wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+dc/2,+dc/2,+wc/2, -dc/2,+dc/2,+wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-dc/2,+dc/2,+wc/2, -dc/2,-dc/2,+wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{-dc/2,-dc/2,+wc/2, +dc/2,-dc/2,+wc/2})) + ...
simplify(subs(F,{xa,ya,za, xb,yb,zb},{+dc/2,-dc/2,+wc/2, +dc/2,+dc/2,+wc/2})))
symvar(Fc)
Fcx = Fc(1);
Fcy = Fc(2);
Fcz = Fc(3);
toc

% Let us add together contributions of all three coil pairs:
F = simplify(Fa + Fb + Fc)
symvar(F)
Fx = F(1);
Fy = F(2);
Fz = F(3);
toc

%%
% Electric currents of individual coil pairs:
syms ia ib ic real
i = [ia; ib; ic]
% Number of wire turns of individual coils:
syms na nb nc positive integer
n = [na; nb; nc]
% Vacuum permeability (magnetic constant):
syms mu0 positive
pi = sym(pi)
% The (resultant, ovearall) magnetic flux density vector:
B = mu0/4/pi*(ia*na*Fa + ib*nb*Fb + ic*nc*Fc)
symvar(B)
% Let us define an anonymous function for B vector numerical computation:
b = str2func(['@(x, y, z, ia, ib, ic, na, nb, nc, da, db, dc, wa, wb, wc, mu0)',char(B)])

%%
% Let us substitute numerical values corresponding to dimensions of the
% considered Helmholtz cage:
Fbx = subs(Fbx,{da,db,dc, wa,wb,wc},{0.760,0.800,0.840, 0.5445*0.760,0.5445*0.800,0.5445*0.840})
Fby = subs(Fby,{da,db,dc, wa,wb,wc},{0.760,0.800,0.840, 0.5445*0.760,0.5445*0.800,0.5445*0.840})
Fbz = subs(Fbz,{da,db,dc, wa,wb,wc},{0.760,0.800,0.840, 0.5445*0.760,0.5445*0.800,0.5445*0.840})

%%
% A plot of Bby versus y for x = z = 0 (along the 0y axis).
tic
x = 0
z = 0
% Vector of ordinate cooridnates of considered point in the space:
yy = -0.5:0.002:0.5;
% Memory allocation for computation results:
qq = nan(size(yy));
% Converting a symbolic function into an anonymous numeric function:
fby = str2func(['@(x,y,z)',char(Fby)])
for j = 1:length(yy)
  y = yy(j);
  q = fby(x,y,z);
  qq(j) = q;
end
% Vacuum permeability:
mu0 =  1.2566370621219e-6 % approximately 4*pi*1e-7 H/m
% Number of turns of a single coil:
ny = 36
% Coil electric current:
Iy = 2 % A
% By magnetic flux density values at considered locations/points:
BB = mu0/4/pi*ny*Iy*qq;
% Let us plot the result:
figure
plot(yy, BB)
hold on
grid on
title('B_y magnetic flux density along the 0y axis, generated by a single pair of coils','FontWeight','normal')
subtitle(['x = ',num2str(x),', z = ',num2str(z)])
xlabel('y, m')
ylabel('B_y, T')
a = gca;
a.YAxis.Exponent = -6;
figure(gcf)
min(yy(find(BB >= 0.99*max(BB))))
toc

%%
% A quiver plot on 0yz plane (for x = 0) of a magnetic field generated by
% a pair of coils wound around the 0y axis.
tic
x = 0
% Grid along the ordinate axis:
yy = -0.26:0.002:0.26;
% Grid along the applicate axis:
zz = -0.25:0.002:0.25;
% Let us allocate some memory for computation results:
qq = nan(length(yy),length(zz));
rr = nan(length(yy),length(zz));
% Converting a symbolic function into an anonymous numeric function.
fby = str2func(['@(x,y,z)',char(Fby)])
fbz = str2func(['@(x,y,z)',char(Fbz)])
for j = 1:length(yy)
    for k = 1:length(zz)
        y = yy(j);
        z = zz(k);
        q = fby(x,y,z);
        r = fbz(x,y,z);
        qq(j,k) = q;
        rr(j,k) = r;
    end
end
% Vacuum permeability:
mu0 =  1.2566370621219e-6 % approximately 4*pi*1e-7 H/m
% Number of turns of a single coil:
ny = 36
% Coil electric current:
Iy = 2 % A
% "y" and "z" components of the magnetic flux density at nodes of the 2-D
% grid:
QQ = mu0/4/pi*ny*Iy*qq;
RR = mu0/4/pi*ny*Iy*rr;
% Let us make a plot:
figure
quiver(yy,zz,transpose(QQ),transpose(RR))
hold on
grid on
title('Quiver plot of the magnetic field in the 0yz plane','FontWeight','normal')
subtitle(['x = ',num2str(x)])
xlabel('y, m')
ylabel('z, m')
figure(gcf)
toc

%%
% Finding magnetic field lines in the plane 0yz (x = 0). Each line starts
% at a point with x = y = 0, z in R. Only the coil pair wound around the 0y
% axis is energised.
tic
% Converting a symbolic function into an anonymous numeric function.
fbx = str2func(['@(x,y,z)',char(Fbx)])
fby = str2func(['@(x,y,z)',char(Fby)])
fbz = str2func(['@(x,y,z)',char(Fbz)])

% % Computing x, y, and z components of a magnetic field along the 0z axis,
% % generated by a pair of Helmholtz coils wound around the 0y axis:
% zz = 0:0.01:2;
% ppyx = arrayfun(@(z)fbx(0,0,z),zz);
% qqyy = arrayfun(@(z)fby(0,0,z),zz);
% rryz = arrayfun(@(z)fbz(0,0,z),zz);
% % Vacuum permeability:
% mu0 =  1.2566370621219e-6 % approximately 4*pi*1e-7 H/m
% % Number of turns of a single coil:
% ny = 36
% % Coil electric current:
% Iy = 2 % A
% BByx = mu0/4/pi*ny*Iy*ppyx;
% BByy = mu0/4/pi*ny*Iy*qqyy;
% BByz = mu0/4/pi*ny*Iy*rryz;
% % Plotting the result:
% figure
% plot(zz,BByx)
% hold on
% plot(zz,BByy)
% plot(zz,BByz)
% grid on
% legend('B_{vx}','B_{vy}','B_{vz}')
% xlabel('z, m')

% Computing magnetic line density along positive 0z ray (x = y = 0)
didz = @(z,i)abs(fby(0,0,z))
[zz,ii] = ode45(didz,[0,1],0,odeset('MaxStep',0.001));
% figure
% plot(zz,ii)
% grid on
% xlabel('z, m')
% ylabel('\int b_y wc')
zzo = interp1(ii,zz,0:0.2:8)
zzo = [-fliplr(zzo), zzo(2:end)];

% Computing magnetic field lines.
drds = @(s,r)[fbx(r(1),r(2),r(3));fby(r(1),r(2),r(3));fbz(r(1),r(2),r(3))]/norm([fbx(r(1),r(2),r(3));fby(r(1),r(2),r(3));fbz(r(1),r(2),r(3))])
figure
hold on
xo = 0
yo = 0
for zo = zzo % -0.6:0.025:0.6
    [~,rr] = ode45(drds,[0,10],[xo;yo;zo],odeset('MaxStep',0.001));
    plot(rr(:,2),rr(:,3),'b-')
    [~,rr] = ode45(drds,[0,-10],[xo;yo;zo],odeset('MaxStep',0.001));
    plot(rr(:,2),rr(:,3),'b-')
end
th = title('Magnetic field lines in the 0yz plane','FontWeight','normal')
grid on
hold on
xlabel('y, m')
ylabel('z, m')
axis equal
xlim([-1.2,1.2])
toc

%%
% Let us compute a few magnetic field lines in a 3-D space. The only
% energised coil pair is the one wound around the 0y axis.
tic
yo = 0
figure
hold on
for xo = -0.15:0.05:0.15
    for zo = -0.15:0.05:0.15
        [~,rr] = ode45(drds,[0,15],[xo;yo;zo],odeset('MaxStep',0.001));
        plot3(rr(:,1),rr(:,2),rr(:,3))
    end
end
grid on
xlabel('x')
ylabel('y')
zlabel('z')
title('Magnetic field lines','FontWeight','normal')
toc
